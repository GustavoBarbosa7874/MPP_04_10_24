// Classe Department (Agregação)
class Department {
    private String name;
    private int id;

    // Construtor
    public Department(String name, int id) {
        this.name = name;
        this.id = id;
    }

    // Métodos getters
    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return "Department: " + name + " (ID: " + id + ")";
    }
}

// Classe Project (Agregação)
class Project {
    private int id;
    private String title;

    // Construtor
    public Project(int id, String title) {
        this.id = id;
        this.title = title;
    }

    // Métodos getters
    public int getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    @Override
    public String toString() {
        return "Project: " + title + " (ID: " + id + ")";
    }
}

// Classe Employee (Composição)
class Employee {
    private int id;
    private String name;
    private Department department; // Agregação
    private Project project;       // Composição

    // Construtor
    public Employee(int id, String name, Department department, Project project) {
        this.id = id;
        this.name = name;
        this.department = department;
        this.project = project;
    }

    // Métodos getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Department getDepartment() {
        return department;
    }

    public Project getProject() {
        return project;
    }

    @Override
    public String toString() {
        return "Employee: " + name + " (ID: " + id + "), " + department + ", " + project;
    }
}

// Classe principal para executar o exemplo
public class Main {
    public static void main(String[] args) {
        // Criando departamentos e projetos
        Department department = new Department("IT", 1);
        Project project = new Project(101, "ERP Implementation");

        // Criando funcionário e associando departamento e projeto
        Employee employee = new Employee(1001, "John Doe", department, project);

        // Exibindo informações do funcionário
        System.out.println(employee);
    }
}
